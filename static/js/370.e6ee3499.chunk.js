"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[370],{370:function(e){e.exports=JSON.parse('{"routes":[{"path":"/blog/2013/06/05/why-react.md","date":"2013-06-05","excerpt":"<p>There are a lot of JavaScript MVC frameworks out there. Why did we build React\\r\\nand why would you want to use it?</p>\\n<h2>React isn\'t an MVC framework. {/<em>react-isnt-an-mvc-framework</em>/}</h2>\\n<p>React is a library for building composable user interfaces. It encourages\\r\\nthe creation of reusable UI components which present data that changes over\\r\\ntime.</p>\\n<h2>React doesn\'t use templates. {/<em>react-doesnt-use-templates</em>/}</h2>\\n<p>Traditionally, web application UIs are built using templates or HTML directives.\\r\\nThese templates dictate the full set of abstractions that you are allowed to use\\r\\nto build your UI.</p>\\n<p>React approaches building user interfaces differently by breaking them into\\r\\n<strong>components</strong>. This means React uses a real, full featured programming language\\r\\nto render views, which we see as an advantage over templates for a few reasons:</p>\\n<ul>\\n<li><strong>JavaScript is a flexible, powerful programming language</strong> with the ability\\r\\nto build abstractions. This is incredibly important in large applications.</li>\\n<li>By unifying your markup with its corresponding view logic, React can actually\\r\\nmake views <strong>easier to extend and maintain</strong>.</li>\\n<li>By baking an understanding of markup and content into JavaScript, there\'s\\r\\n<strong>no manual string concatenation</strong> and therefore less surface area for XSS\\r\\nvulnerabilities.</li>\\n</ul>\\n<p>We\'ve also created <a href=\\"/docs/jsx-in-depth.html\\">JSX</a>, an optional syntax\\r\\nextension, in case you prefer the readability of HTML to raw JavaScript.</p>\\n<h2>Reactive updates are dead simple. {/<em>reactive-updates-are-dead-simple</em>/}</h2>\\n<p>React really shines when your data changes over time.</p>\\n<p>In a traditional JavaScript application, you need to look at what data changed\\r\\nand imperatively make changes to the DOM to keep it up-to-date. Even AngularJS,\\r\\nwhich provides a declarative interface via directives and data binding <a href=\\"https://code.angularjs.org/1.0.8/docs/guide/directive#reasonsbehindthecompilelinkseparation\\" target=\\"_blank\\" rel=\\"nofollow noopener noreferrer\\">requires\\r\\na linking function to manually update DOM nodes</a>.</p>\\n<p>React takes a different approach.</p>\\n<p>When your component is first initialized, the <code>render</code> method is called,\\r\\ngenerating a lightweight representation of your view. From that representation,\\r\\na string of markup is produced, and injected into the document. When your data\\r\\nchanges, the <code>render</code> method is called again. In order to perform updates as\\r\\nefficiently as possible, we diff the return value from the previous call to\\r\\n<code>render</code> with the new one, and generate a minimal set of changes to be applied\\r\\nto the DOM.</p>\\n<blockquote>\\n<p>The data returned from <code>render</code> is neither a string nor a DOM node -- it\'s a\\r\\nlightweight description of what the DOM should look like.</p>\\n</blockquote>\\n<p>We call this process <strong>reconciliation</strong>. Check out\\r\\n<a href=\\"http://jsfiddle.net/2h6th4ju/\\" target=\\"_blank\\" rel=\\"nofollow noopener noreferrer\\">this jsFiddle</a> to see an example of\\r\\nreconciliation in action.</p>\\n<p>Because this re-render is so fast (around 1ms for TodoMVC), the developer\\r\\ndoesn\'t need to explicitly specify data bindings. We\'ve found this approach\\r\\nmakes it easier to build apps.</p>\\n<h2>HTML is just the beginning. {/<em>html-is-just-the-beginning</em>/}</h2>\\n<p>Because React has its own lightweight representation of the document, we can do\\r\\nsome pretty cool things with it:</p>\\n<ul>\\n<li>Facebook has dynamic charts that render to <code>&#x3C;canvas></code> instead of HTML.</li>\\n<li>Instagram is a \\"single page\\" web app built entirely with React and\\r\\n<code>Backbone.Router</code>. Designers regularly contribute React code with JSX.</li>\\n<li>We\'ve built internal prototypes that run React apps in a web worker and use\\r\\nReact to drive <strong>native iOS views</strong> via an Objective-C bridge.</li>\\n<li>You can run React\\r\\n<a href=\\"https://github.com/petehunt/react-server-rendering-example\\" target=\\"_blank\\" rel=\\"nofollow noopener noreferrer\\">on the server</a>\\r\\nfor SEO, performance, code sharing and overall flexibility.</li>\\n<li>Events behave in a consistent, standards-compliant way in all browsers\\r\\n(including IE8) and automatically use\\r\\n<a href=\\"http://davidwalsh.name/event-delegate\\" target=\\"_blank\\" rel=\\"nofollow noopener noreferrer\\">event delegation</a>.</li>\\n</ul>\\n<p>Head on over to <a href=\\"https://reactjs.org\\" target=\\"_blank\\" rel=\\"nofollow noopener noreferrer\\">https://reactjs.org</a> to check out what we have\\r\\nbuilt. Our documentation is geared towards building apps with the framework,\\r\\nbut if you are interested in the nuts and bolts\\r\\n<a href=\\"/support.html\\">get in touch</a> with us!</p>\\n<p>Thanks for reading!</p>\\n","readingTime":"3 min read"},{"path":"/blog/2013/06/02/jsfiddle-integration.md","date":"2013-06-02","title":"JSFiddle Integration","author":["vjeux"],"tag":"Javascript","excerpt":"<h1>Useful JavaScript Code Snippets</h1>\\n<h1>Useful JavaScript Code Snippets</h1>\\n<ol>\\n<li>Sort an Array</li>\\n</ol>\\n<p>//Numbers\\r\\nconst numbers = [101, 8, 87];\\r\\nnumbers.sort((a, b) => {\\r\\nreturn a - b;\\r\\n});\\r\\n//[ 8, 87, 101 ]\\r\\n</p>\\n<ol start=\\"2\\">\\n<li>Select a random element</li>\\n</ol>\\n<ol start=\\"3\\">\\n<li>Reverse a string</li>\\n</ol>\\n<p>revereseString(\\"Random String\\")\\r\\n</p>\\n<ol start=\\"4\\">\\n<li>Check if element has a class</li>\\n</ol>\\n<ol start=\\"5\\">\\n<li>String interpolation</li>\\n</ol>\\n<ol start=\\"6\\">\\n<li>Loop through an array</li>\\n</ol>\\n<p>/*\\r\\nFord\\r\\nBMW\\r\\nAudi\\r\\n*/\\r\\n</p>\\n<ol start=\\"7\\">\\n<li>Get current time</li>\\n</ol>\\n<p>console.log(currentTimes)\\r\\n//example output: \\"22:16:41\\"\\r\\n</p>\\n<ol start=\\"8\\">\\n<li>Replace part of a string</li>\\n</ol>\\n<p>console.log(replacedString) //Output: \\"We are awesome\\"\\r\\n</p>\\n<ol start=\\"9\\">\\n<li>Destructing variable assignment</li>\\n</ol>\\n<ol start=\\"10\\">\\n<li>Using the spread operator</li>\\n</ol>\\n","readingTime":"2 min read"},{"path":"/blog/2022/02/article.md","date":"2022-02-article.md","excerpt":"<h1>Useful JavaScript Code Snippets</h1>\\n<h1>Useful JavaScript Code Snippets</h1>\\n<ol>\\n<li>Sort an Array</li>\\n</ol>\\n<p>//Numbers\\nconst numbers = [101, 8, 87];\\nnumbers.sort((a, b) => {\\nreturn a - b;\\n});\\n//[ 8, 87, 101 ]\\n</p>\\n<ol start=\\"2\\">\\n<li>Select a random element</li>\\n</ol>\\n<ol start=\\"3\\">\\n<li>Reverse a string</li>\\n</ol>\\n<p>revereseString(\\"Random String\\")\\n</p>\\n<ol start=\\"4\\">\\n<li>Check if element has a class</li>\\n</ol>\\n<ol start=\\"5\\">\\n<li>String interpolation</li>\\n</ol>\\n<ol start=\\"6\\">\\n<li>Loop through an array</li>\\n</ol>\\n<p>/*\\nFord\\nBMW\\nAudi\\n*/\\n</p>\\n<ol start=\\"7\\">\\n<li>Get current time</li>\\n</ol>\\n<p>console.log(currentTimes)\\n//example output: \\"22:16:41\\"\\n</p>\\n<ol start=\\"8\\">\\n<li>Replace part of a string</li>\\n</ol>\\n<p>console.log(replacedString) //Output: \\"We are awesome\\"\\n</p>\\n<ol start=\\"9\\">\\n<li>Destructing variable assignment</li>\\n</ol>\\n<ol start=\\"10\\">\\n<li>Using the spread operator</li>\\n</ol>\\n","readingTime":"2 min read"}]}')}}]);